import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# Create a movie dataset with titles and genres
data = pd.DataFrame({
    'title': ['Movie A', 'Movie B', 'Movie C', 'Movie D'],
    'genres': ['Action', 'Comedy', 'Action, Comedy', 'Drama']
})

# Create a TF-IDF vectorizer to convert movie genres into numerical features
tfidf_vectorizer = TfidfVectorizer()

# Compute TF-IDF scores for movie genres
tfidf_matrix = tfidf_vectorizer.fit_transform(data['genres'])

# Compute cosine similarity between movies based on TF-IDF scores
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)

# Define a function to recommend movies based on content-based filtering
def content_based_filtering(title, cosine_sim=cosine_sim, num_recommendations=3):
    movie_idx = data[data['title'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[movie_idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    top_indices = [i for i, _ in sim_scores[1:num_recommendations+1]]
    return data['title'].iloc[top_indices]

# Recommend movies similar to 'Movie A'
recommended_movies = content_based_filtering('Movie A', num_recommendations=3)
print("Content-Based Filtering Recommendations for 'Movie A':", recommended_movies.values)
